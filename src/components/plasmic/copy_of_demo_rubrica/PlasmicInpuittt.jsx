// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gAKbcXWngnVV2asmkth1no
// Component: bseC7_aD3S
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInputddd from "../../TextInputddd"; // plasmic-import: kWg9mjaIxWD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import sty from "./PlasmicInpuittt.module.css"; // plasmic-import: bseC7_aD3S/css

export const PlasmicInpuittt__VariantProps = new Array();

export const PlasmicInpuittt__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicInpuittt__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInputddd.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <TextInputddd
      data-plasmic-name={"textInputddd"}
      data-plasmic-override={overrides.textInputddd}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.textInputddd)}
      color={"dark"}
      onChange={async (...eventArgs) => {
        ((...eventArgs) => {
          p.generateStateOnChangeProp($state, ["textInputddd", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }).apply(null, eventArgs);
        (async event => {
          const $steps = {};
        }).apply(null, eventArgs);
      }}
      placeholder={"Inserisci la mail o il numero di cellulare:"}
      value={p.generateStateValueProp($state, ["textInputddd", "value"])}
    />
  );
}

const PlasmicDescendants = {
  textInputddd: ["textInputddd"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInpuittt__ArgProps,
          internalVariantPropNames: PlasmicInpuittt__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInpuittt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "textInputddd") {
    func.displayName = "PlasmicInpuittt";
  } else {
    func.displayName = `PlasmicInpuittt.${nodeName}`;
  }
  return func;
}

export const PlasmicInpuittt = Object.assign(
  // Top-level PlasmicInpuittt renders the root element
  makeNodeComponent("textInputddd"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicInpuittt
    internalVariantProps: PlasmicInpuittt__VariantProps,
    internalArgProps: PlasmicInpuittt__ArgProps
  }
);

export default PlasmicInpuittt;
/* prettier-ignore-end */
