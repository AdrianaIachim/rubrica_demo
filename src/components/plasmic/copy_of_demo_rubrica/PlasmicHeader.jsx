// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gAKbcXWngnVV2asmkth1no
// Component: 8QKExZLj5WBoM
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_demo_rubrica.module.css"; // plasmic-import: gAKbcXWngnVV2asmkth1no/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 8QKExZLj5WBoM/css
import UsersvgIcon from "./icons/PlasmicIcon__Usersvg"; // plasmic-import: UGSBNQax32uSC1/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: Nfvb0kir8BzhFA/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 78kseT_i641NRo/icon
import animalpngMxQlfAubQ5KjX8 from "./images/animalpng.png"; // plasmic-import: MxQLFAubQ5kjX8/picture

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__qqzVm)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.columns___97QAp)}>
              <div className={classNames(projectcss.all, sty.column__pcYkk)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Bkm0)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__f7L7V)}
                    >
                      <UsersvgIcon
                        className={classNames(projectcss.all, sty.svg__u3YjQ)}
                        role={"img"}
                      />

                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__qfOdS
                        )}
                        href={"https://www.plasmic.app/"}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {"Accedi"}
                          </span>
                        </React.Fragment>
                      </a>
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link___47Lh3
                        )}
                        href={"https://www.plasmic.app/"}
                      >
                        {"Some link text"}
                      </a>
                    </div>
                  ) : null}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__lmQ5)}
                />
              </div>
              {true ? (
                <div className={classNames(projectcss.all, sty.column__oy376)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qo6Vi)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__obgz1)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"130px"}
                      loading={"lazy"}
                      src={{
                        src: animalpngMxQlfAubQ5KjX8,
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.column__hn4Pg)}>
                <div className={classNames(projectcss.all, sty.freeBox__uNkjI)}>
                  <SearchsvgIcon
                    className={classNames(projectcss.all, sty.svg__gKwUu)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.columns__q1OV7)}>
            <div className={classNames(projectcss.all, sty.column__qagpn)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__umF2J)}
              >
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__cgh7B
                  )}
                  href={`/Login`}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lapGl)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bqsnb)}
                  >
                    <UsersvgIcon
                      className={classNames(projectcss.all, sty.svg__smX7)}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToLogin"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "RMLYcwrYZ",
                                    componentUuid: "8QKExZLj5WBoM",
                                    argName: "destination"
                                  },
                                  () => `/Login`
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "RMLYcwrYZ",
                                  componentUuid: "8QKExZLj5WBoM"
                                },
                                () =>
                                  (({ destination }) => {
                                    location.assign(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToLogin"] === "object" &&
                          typeof $steps["goToLogin"].then === "function"
                        ) {
                          $steps["goToLogin"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "RMLYcwrYZ",
                              componentUuid: "8QKExZLj5WBoM"
                            },
                            $steps["goToLogin"]
                          );
                        }
                      }}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__roqjm
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToLogin"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "QBqMpoMJocTrm",
                                  componentUuid: "8QKExZLj5WBoM",
                                  argName: "destination"
                                },
                                () => `/Login`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "QBqMpoMJocTrm",
                                componentUuid: "8QKExZLj5WBoM"
                              },
                              () =>
                                (({ destination }) => {
                                  location.assign(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToLogin"] === "object" &&
                        typeof $steps["goToLogin"].then === "function"
                      ) {
                        $steps["goToLogin"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "QBqMpoMJocTrm",
                            componentUuid: "8QKExZLj5WBoM"
                          },
                          $steps["goToLogin"]
                        );
                      }
                    }}
                  >
                    {"Accedi"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__jYezb)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__pTyPz
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__kYSsj)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vXffO
                    )}
                  >
                    {""}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__tul9Z)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column__st6Jy)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nxWcl)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"130px"}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToHome"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "Rl_pfx-PI0B4n",
                            componentUuid: "8QKExZLj5WBoM"
                          },
                          () =>
                            (({ destination }) => {
                              location.assign(destination);
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["goToHome"] === "object" &&
                    typeof $steps["goToHome"].then === "function"
                  ) {
                    $steps["goToHome"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "Rl_pfx-PI0B4n",
                        componentUuid: "8QKExZLj5WBoM"
                      },
                      $steps["goToHome"]
                    );
                  }
                }}
                src={{
                  src: animalpngMxQlfAubQ5KjX8,
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.column__dNtth)}>
              <div className={classNames(projectcss.all, sty.freeBox___3Bw4A)}>
                {true ? (
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zuDqk
                    )}
                    href={"#"}
                  >
                    <SearchsvgIcon
                      className={classNames(projectcss.all, sty.svg___9W5Fc)}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToContatti"] = true
                          ? (() => {
                              const actionArgs = {};
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "_JQoTUvQVuo3Y",
                                  componentUuid: "8QKExZLj5WBoM"
                                },
                                () =>
                                  (({ destination }) => {
                                    location.assign(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToContatti"] === "object" &&
                          typeof $steps["goToContatti"].then === "function"
                        ) {
                          $steps["goToContatti"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "_JQoTUvQVuo3Y",
                              componentUuid: "8QKExZLj5WBoM"
                            },
                            $steps["goToContatti"]
                          );
                        }
                      }}
                      role={"img"}
                    />
                  </a>
                ) : null}
              </div>
            </div>
          </div>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
