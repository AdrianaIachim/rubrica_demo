// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gAKbcXWngnVV2asmkth1no
// Component: 45mdFJ4LW80TRf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header2 from "../../Header2"; // plasmic-import: lltuatGzwUTWMq/component
import RigaContatti from "../../RigaContatti"; // plasmic-import: 4w-x-07IeqeEx4/component
import Footer from "../../Footer"; // plasmic-import: LXM0niw76eA/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_demo_rubrica.module.css"; // plasmic-import: gAKbcXWngnVV2asmkth1no/projectcss
import sty from "./PlasmicContatti.module.css"; // plasmic-import: 45mdFJ4LW80TRf/css

export const PlasmicContatti__VariantProps = new Array();

export const PlasmicContatti__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicContatti__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___35Ao5)}>
            <Header2
              data-plasmic-name={"header2"}
              data-plasmic-override={overrides.header2}
              className={classNames("__wab_instance", sty.header2)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___2KWP)}>
            <RigaContatti
              className={classNames("__wab_instance", sty.rigaContatti__wIUmp)}
            />
          </div>
          {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
            <div
              className={classNames(projectcss.all, sty.freeBox___8GIet)}
              key={currentIndex}
            >
              {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                <RigaContatti
                  className={classNames(
                    "__wab_instance",
                    sty.rigaContatti___2Xkea
                  )}
                  key={currentIndex}
                />
              ))}
            </div>
          ))}
          <div className={classNames(projectcss.all, sty.freeBox__jClRn)}>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header2", "footer"],
  header2: ["header2"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContatti__ArgProps,
          internalVariantPropNames: PlasmicContatti__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContatti__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContatti";
  } else {
    func.displayName = `PlasmicContatti.${nodeName}`;
  }
  return func;
}

export const PlasmicContatti = Object.assign(
  // Top-level PlasmicContatti renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header2: makeNodeComponent("header2"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicContatti
    internalVariantProps: PlasmicContatti__VariantProps,
    internalArgProps: PlasmicContatti__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContatti;
/* prettier-ignore-end */
